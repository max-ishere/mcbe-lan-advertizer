//! Defines errors that could occur during execution
//!
//! The top-level [`ProgramError`] defines what could end program execution.
//!
//! [`InvalidProperties`] defines errors that could occur while parsing the config file

use std::num::ParseIntError;

/// Represents execution errors
#[derive(Debug, Error)]
pub enum ProgramError {
    /// The [`std::io::Error`] that is generated by a failed IO operation
    #[error(transparent)]
    IoError(std::io::Error),
    /// Errors that occur while parsing `server.properties`
    #[error(transparent)]
    InvalidConfig(InvalidProperties),
}

impl From<InvalidProperties> for ProgramError {
    fn from(e: InvalidProperties) -> Self {
        Self::InvalidConfig(e)
    }
}

impl From<std::io::Error> for ProgramError {
    fn from(e: std::io::Error) -> Self {
        Self::IoError(e)
    }
}

/// Returned from [`ServerProperties`]`::from_str()` and points out formatting
/// errors in the file.
///
/// [`ServerProperties`]: crate::config::server_properties::ServerProperties
#[derive(Debug, Error)]
pub enum InvalidProperties {
    /// The gamemode specified could not be parsed.
    #[error("Bad Gamemode: {0}")]
    BadGamemode(String),
    /// A string has an illegal `;`.
    #[error("This string should not have a semicolon (;): {0}")]
    ContainsSemicolon(String),
    /// What should've been a number was not parsed.
    #[error("Expected number, but could not parse it: {0}")]
    Nan(ParseIntError),
}

/// Returned from [`Gamemode`]`::from_str()` and contains the original
/// string that the enum cannot represent.
///
/// [`Gamemode`]: crate::config::server_properties::Gamemode
#[derive(Debug, Error)]
#[error("Unsupported gamemode: {0}")]
pub struct BadGamemode(pub String);

/// A [String](`Self::0`) contains a semicolon, which is not allowed.
#[derive(Debug, Error)]
#[error("String contains a `;` which is not allowed: \"{0}\"")]
pub struct ContainsSemicolon(pub String);

impl From<BadGamemode> for InvalidProperties {
    fn from(b: BadGamemode) -> Self {
        Self::BadGamemode(b.0)
    }
}

impl From<ContainsSemicolon> for InvalidProperties {
    fn from(s: ContainsSemicolon) -> Self {
        Self::ContainsSemicolon(s.0)
    }
}

impl From<ParseIntError> for InvalidProperties {
    fn from(e: ParseIntError) -> Self {
        Self::Nan(e)
    }
}
